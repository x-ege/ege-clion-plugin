name: Version Check

on:
  # 每天 UTC 0点 (北京时间 8点) 自动运行
  schedule:
    - cron: '0 0 * * *'
  
  # 手动触发
  workflow_dispatch:
  
  # PR 时也检查
  pull_request:
    branches:
      - master

jobs:
  check-clion-version:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'gradle'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Check CLion version
        id: version-check
        run: |
          ./gradlew checkClionVersion
        continue-on-error: true

      - name: Create Issue if version is outdated
        if: steps.version-check.outcome == 'failure' && github.event_name == 'schedule'
        uses: actions/github-script@v7
        with:
          script: |
            const title = '🔔 CLion 新版本发布 - 需要更新 untilBuild';
            const body = `检测到 CLion 发布了新版本！
            
            当前插件的 \`untilBuild\` 配置可能已过时。
            
            ## 操作步骤
            
            1. 运行以下命令自动更新版本：
               \`\`\`bash
               ./gradlew updateUntilBuild
               \`\`\`
            
            2. 检查生成的更改
            
            3. 测试插件兼容性
            
            4. 提交并发布新版本
            
            ## 自动化信息
            - 触发时间: ${new Date().toISOString()}
            - Workflow: ${context.workflow}
            - Run ID: ${context.runId}
            `;
            
            // 检查是否已有相同标题的 issue
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: ['version-update']
            });
            
            const existingIssue = issues.data.find(issue => issue.title === title);
            
            if (existingIssue) {
              console.log('Already has an open issue for version update');
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: existingIssue.number,
                body: `🔄 版本检查再次失败 (${new Date().toISOString()})\n\n请尽快更新版本配置。`
              });
            } else {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: title,
                body: body,
                labels: ['version-update', 'automated']
              });
            }

      - name: Fail if version check failed
        if: steps.version-check.outcome == 'failure'
        run: |
          echo "❌ 版本检查失败！请更新 untilBuild 配置"
          exit 1
